''!-TestCaseWithTransientFreshFixture-!'' is a special kind of !-ObjectTest-! which instantiates a ''!-TransientFreshFixtue-!'' before each tests and throws away (with garbage collection) after each tests.

!**> See the details of testing configuration...
!img http://test.itkodex.hu/files/ITCodex/LiTest/TestOfSuiteWithTransientFreshFixture-Overview.gif
**!
!**> Source code definitions
!define TestCaseWithTransientFreshFixture ({{{
package hu.itkodex.litest.testsuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.Matchers.*;
import hu.itkodex.litest.fixture.FitTestTransientFreshFixture;
import hu.itkodex.litest.testcase.GenericTestSuite;
import hu.itkodex.litest.testcase.TestSUT;

public class FitTestSuiteWithTransientFreshFixture extends GenericTestSuite<TestSUT, FitTestTransientFreshFixture> {
   private static final String FIXTURE_CONTAINER_PATH = null;

   public FitTestSuiteWithTransientFreshFixture() {
      super( FIXTURE_CONTAINER_PATH );
   }

   @Test public void methodOneToExcercise_ShouldReturnHello() {
      assertThat( sut.methodOneToExcercise(), equalTo( "Hello" ));
   }

   @Test public void methodTwoToExcercise_ShouldReturnWorld() {
      assertThat( sut.methodTwoToExcercise(), equalTo( "world!" ));
   }
}
}}} )

!define TestTransientFreshFixture ({{{
package hu.itkodex.litest.fixture;

import hu.itkodex.litest.fixture.GenericTestFixture;
import hu.itkodex.litest.fixture.TransientFreshFixture;
import hu.itkodex.litest.testcase.TestSUT;

public class FitTestTransientFreshFixture extends GenericTestFixture<TestSUT> implements TransientFreshFixture<TestSUT>{

   @Override protected TestSUT instantiateSUT() {
      return new TestSUT();
   }

   @Override protected void configureAfterSutInstantiation() { }

   @Override protected void configureBeforeSutInstantiation() { }

   @Override protected void releaseResources() { }
}
}}})

---- Persistent fresh fixture definition:
!define TestPersistentFreshFixture ({{{
package hu.itkodex.litest.fixture;

import hu.itkodex.litest.fixture.GenericTestFixture;
import hu.itkodex.litest.testcase.TestSUT;

public class FitTestPersistentFreshFixture extends GenericTestFixture<TestSUT> implements PersistentFreshFixture<TestSUT>{

   @Override protected TestSUT instantiateSUT() {
      return new TestSUT();
   }

   @Override protected void configureAfterSutInstantiation() { }

   @Override protected void configureBeforeSutInstantiation() { }

   @Override protected void releaseResources() { }
}
}}})

----- Test suite with persistent fresh fixture
!define TestCaseWithPersistentFreshFixture ({{{
package hu.itkodex.litest.testcase;

import hu.itkodex.litest.fixture.FitTestPersistentFreshFixture;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.Matchers.*;

public class FitTestSuiteWithPersistentFreshFixture extends GenericTestSuite<TestSUT, FitTestPersistentFreshFixture> {
   private static final String FIXTURE_CONTAINER_PATH = null;

   public FitTestSuiteWithPersistentFreshFixture() {
      super( FIXTURE_CONTAINER_PATH );
   }
}
}}} )

**!
!4 Test suite with transient fresh fixture
First we define a transient fresh fixture (subclass of !-GenericTestFixture-! which implements !-TransientFreshFixture-! interface.
|'''define test fixture'''|${TestTransientFreshFixture}|

The second step is to define and instantiate a test suite which uses the previously defined transient fresh fixture. Test suites should specialize !-GenericTestSuite-! which implements the fixture strategy follows from the specified fixture type.
|'''define test suite'''|${TestCaseWithTransientFreshFixture}|
|'''instantiate test suite'''|!-freshTestSuite-!|

When the test suite is instantiated nor the fixture, nor the sut object is instantiated.
|'''assertThat'''|freshTestSuite.getFixture()|'''is'''|nullValue()|
|'''assertThat'''|freshTestSuite.getSUT()|'''is'''|nullValue()|

In case of Transient Fresh Fixture strategy even the !-beforeAllTests()-! doesn't instantiates anything.
|'''run before all tests'''|
|'''assertThat'''|freshTestSuite.getFixture()|'''is'''|nullValue()|
|'''assertThat'''|freshTestSuite.getSUT()|'''is'''|nullValue()|

When !-beforeEachTest()-! is invoked by the test runner fixture is instantiated and it's !-setUp()-! method is invoked. The fixture's resposibility is to instantiate the sut and it's depends on components.
|'''run before each test'''|
|'''assertThat'''|freshTestSuite.getFixture()|'''is'''|notNullValue()|
|'''assertThat'''|freshTestSuite.getFixture()|'''is'''|instanceOf( !-FitTestTransientFreshFixture-!.class )|
|'''assertThat'''|freshTestSuite.getFixture().isConfigured()|'''is'''|is(true)|
|'''assertThat'''|freshTestSuite.getSUT()|'''is'''|notNullValue()|

As the fixture is configured, test runner executes a test case.
|'''run test case'''|methodOneToExcercise_ShouldReturnHello|

Executing a test case the test runner invokes !-afterEachTest()-! which destroys fixture and therefore SUT and DOCs.
|'''run after each test'''|
|'''assertThat'''|freshTestSuite.getFixture()|'''is'''|nullValue()|
|'''assertThat'''|freshTestSuite.getSUT()|'''is'''|nullValue()|

And the same sequence of events is followed untill all test cases was executed.
|'''run before each test'''|
|'''run test case'''|methodTwoToExcercise_ShouldReturnWorld|
|'''run after each test'''|

!4 Test suite with persistent fresh fixture
First we define a persistent fresh fixture (subclass of !-GenericTestFixture-! which implements !-PersistentFreshFixture-! interface.
|'''define test fixture'''|${TestPersistentFreshFixture}|

The second step is to define and instantiate a test suite which uses the previously defined persistent fresh fixture. Test suites should specialize !-GenericTestSuite-! which implements the fixture strategy follows from the specified fixture type. ''Please note that we test here only the differencies in fixture instantiation and set up and do not duplicate the test case execution.''
|'''define test suite'''|${TestCaseWithPersistentFreshFixture}|
|'''instantiate test suite'''|!-persistentTestSuite-!|

!4 Test suite with persistent shared fixture

!4 Test suite with composite fixture